heat_template_version: 2013-05-23

description: Template to deploy a CoreOS Cluster of 3 Machines

parameters:
  Flavor:
    default: m1.smaller
    description: "Type of instance (flavor) to be used"
    label: "Instance Type"
    type: string
    constraints:
      - allowed_values: [m1.small, m1.smaller, m1.medium, m1.large ]
        description: Allowed values are m1.small, m1.medium and m1.large
  Image:
    description: "Name of image to use"
    default: CoreOS
    type: string
    constraints:
      - allowed_values: [CoreOS, CoreOS-stable-557.2.0, CoreOS-stable-607.0.0]
        description: Allowed values are CoreOS, CoreOS-stable-557.2.0, CoreOS-stable-607.0.0
  Public Net ID:
    type: string
    description: ID of public network for which floating IP addresses will be allocated (default external)
    default: 831c6cfe-3f05-4fcc-9488-ca4e3106d748
  Private Net ID:
    type: string
    description: ID of private network into which servers get deployed (default internal)
    default: 9284f3fb-2a42-42b8-aff5-5492ae460ed6
  Private Subnet ID:
    type: string
    description: ID of private sub network into which servers get deployed (default internal_subnet)
    default: 8dae0514-a32a-4e2e-88a9-ea903b25a844
  Key Name CoreOS:
    description: "Name of key-pair to be used for the CoreOS VMs"
    label: "Key Name"
    type: string
    default: edmo-bart
  CoreOS Cluster Discovery URL:
    description: "URL of the Cluster-Discovery URL"
    type: string
    default: https://discovery.etcd.io/new?size=5
  Preload Docker Images:
    description: "URL of the Cluster-Discovery URL"
    type: string
    default: "True"
    constraints:
      - allowed_values: ["True", "False"]
  Number of Web Servers:
    description: "Number of Web Servers"
    type: string
    default: "2"
    constraints:
      - allowed_values: ["2","3","4","5"]
  Number of Cache Servers:
    description: "Number of Cache Servers"
    type: string
    default: "2"
    constraints:
      - allowed_values: ["2","3","4","5"]
  Zurmo Git Branch:
    description: "Git Branch / Version of Zurmo to use"
    type: string
    default: "master"
    constraints:
      - allowed_values: ["master", "logging-dev"]
  Zurmo Start Fleet Services:
    description: "Start Zurmo Application (Fleet Services)"
    type: string
    default: "True"
    constraints:
      - allowed_values: ["True", "False"]

resources:
  coreos_init:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
            write_files:
            - path: /etc/environment
              content:
                str_replace:
                  template: |
                    COREOS_PUBLIC_IPV4=$public_ipv4
                    COREOS_PRIVATE_IPV4=$private_ipv4
                    DOCKER_PRELOAD_ENABLED=$preload-docker-images$
                    ZURMO_INIT_GIT_BRANCH=$zurmo-git-branch$
                    DOCKER_IMAGE_TAG=$zurmo-git-branch$
                  params:
                    $preload-docker-images$: {get_param: "Preload Docker Images"}
                    $zurmo-git-branch$: {get_param: "Zurmo Git Branch"}
            - path: /etc/ssh/sshd_config
              permissions: '0600'
              owner: root:root
              content: |
                # Use most defaults for sshd configuration.
                UsePrivilegeSeparation sandbox
                Subsystem sftp internal-sftp

                PermitRootLogin no
                AllowUsers core
                PasswordAuthentication no
                ChallengeResponseAuthentication no
            coreos:
              etcd:
                discovery: { get_param: "CoreOS Cluster Discovery URL" }
                addr: $private_ipv4:4001
                peer-addr: $private_ipv4:7001
                cluster-active-size: 3
              units:
                - name: etcd.service
                  command: start
                - name: fleet.service
                  command: start
                - name: docker-tcp.socket
                  command: start
                  enable: true
                  content: |
                    [Unit]
                    Description=Docker Socket for the API
                    [Socket]
                    ListenStream=2375
                    BindIPv6Only=both
                    Service=docker.service
                    [Install]
                    WantedBy=sockets.target
                - name: zurmo-predownload-docker-images.service
                  command: start
                  content: |
                    [Unit]
                    Description=Service to Pre-Download Docker Images for Zurmo
                    Requires=etcd.service
                    After=etcd.service

                    [Service]
                    EnvironmentFile=/etc/environment

                    Type=oneshot

                    ExecStartPre=/usr/bin/mkdir -p /tmp/zurmo
                    ExecStartPre=/usr/bin/wget -P /tmp/zurmo https://raw.githubusercontent.com/icclab/cna-seed-project/master/init/preload-docker-images.sh
                    ExecStartPre=/bin/chmod +x /tmp/zurmo/preload-docker-images.sh
                    ExecStart=/bin/bash -c "/tmp/zurmo/preload-docker-images.sh;"

                    [Install]
                    WantedBy=multi-user.target

  vm_coreos_01:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-01"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image }
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_01_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
            - path: /etc/environment
              content: |
                COREOS_PUBLIC_IPV4=$public_ipv4
                COREOS_PRIVATE_IPV4=$private_ipv4
                DOCKER_PRELOAD_ENABLED=$preload-docker-images$
                ZURMO_APACHE_NUM_INSTANCES=$number-of-web-servers$
                ZURMO_MEMCACHE_NUM_INSTANCES=$number-of-cache-servers$
                ZURMO_INIT_GIT_BRANCH=$zurmo-git-branch$
                DOCKER_IMAGE_TAG=$zurmo-git-branch$
                ZURMO_INIT_START_SERVICES=$zurmo-start-fleet-services$
            - path: /etc/ssh/sshd_config
              permissions: '0600'
              owner: root:root
              content: |
                # Use most defaults for sshd configuration.
                UsePrivilegeSeparation sandbox
                Subsystem sftp internal-sftp

                PermitRootLogin no
                AllowUsers core
                PasswordAuthentication no
                ChallengeResponseAuthentication no
            coreos:
              etcd:
                discovery: $etcd_discovery_url$
                addr: $private_ipv4:4001
                peer-addr: $private_ipv4:7001
                cluster-active-size: 3
              fleet:
                metadata: public=true
              units:
                - name: etcd.service
                  command: start
                - name: fleet.service
                  command: start
                - name: docker-tcp.socket
                  command: start
                  enable: true
                  content: |
                    [Unit]
                    Description=Docker Socket for the API
                    [Socket]
                    ListenStream=2375
                    BindIPv6Only=both
                    Service=docker.service
                    [Install]
                    WantedBy=sockets.target
                - name: zurmo-predownload-docker-images.service
                  command: start
                  content: |
                    [Unit]
                    Description=Service to Pre-Download Docker Images for Zurmo
                    Requires=etcd.service
                    After=etcd.service

                    [Service]
                    EnvironmentFile=/etc/environment

                    Type=oneshot

                    ExecStartPre=/usr/bin/mkdir -p /tmp/zurmo
                    ExecStartPre=/usr/bin/wget -P /tmp/zurmo https://raw.githubusercontent.com/icclab/cna-seed-project/master/init/preload-docker-images.sh
                    ExecStartPre=/bin/chmod +x /tmp/zurmo/preload-docker-images.sh
                    ExecStart=/bin/bash -c "/tmp/zurmo/preload-docker-images.sh;"

                    [Install]
                    WantedBy=multi-user.target
                - name: zurmo-init.service
                  command: start
                  content: |
                    [Unit]
                    Description=Service to initialize Zurmo Application
                    Requires=etcd.service
                    After=etcd.service
                    After=zurmo-predownload-docker-images.service

                    [Service]
                    EnvironmentFile=/etc/environment

                    Type=oneshot

                    ExecStartPre=/usr/bin/mkdir -p /tmp/zurmo
                    ExecStartPre=/usr/bin/wget -P /tmp/zurmo https://raw.githubusercontent.com/icclab/cna-seed-project/master/init/startup.sh
                    ExecStartPre=/bin/chmod +x /tmp/zurmo/startup.sh
                    ExecStart=/bin/bash -c "/tmp/zurmo/startup.sh;"

                    [Install]
                    WantedBy=multi-user.target
          params:
            $etcd_discovery_url$: { get_param: "CoreOS Cluster Discovery URL" }
            $preload-docker-images$: {get_param: "Preload Docker Images"}
            $number-of-web-servers$: {get_param: "Number of Web Servers"}
            $number-of-cache-servers$: {get_param: "Number of Cache Servers"}
            $zurmo-git-branch$: {get_param: "Zurmo Git Branch"}
            $zurmo-start-fleet-services$: {get_param: "Zurmo Start Fleet Services"}

  vm_coreos_01_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - default

  vm_coreos_01_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: "Public Net ID" }
      port_id: { get_resource: vm_coreos_01_port }

  vm_coreos_02:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-02"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image}
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_02_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_02_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - default

  vm_coreos_03:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-03"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image}
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_03_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_03_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - default

  vm_coreos_04:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-04"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image}
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_04_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_04_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - default

  vm_coreos_05:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "$stack_name$-CoreOS-05"
          params:
            $stack_name$: { get_param: "OS::stack_name" }
      image: { get_param: Image}
      flavor: { get_param: Flavor }
      key_name: { get_param: "Key Name CoreOS" }
      networks:
        - port: { get_resource: vm_coreos_05_port }
      user_data_format: RAW
      user_data:
        get_resource: coreos_init

  vm_coreos_05_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: "Private Net ID" }
      fixed_ips:
        - subnet_id: { get_param: "Private Subnet ID" }
      security_groups:
        - default

outputs:
  CoreOS-01 Private IP:
    description: Private IP address of the CoreOS-01 VM
    value: { get_attr: [ vm_coreos_01, first_address ] }
  CoreOS-01 Public IP:
    description: Public IP address of the CoreOS-01 VM
    value: { get_attr: [ vm_coreos_01_floating_ip, floating_ip_address ] }
  CoreOS-02 Private IP:
    description: Private IP address of the CoreOS-02 VM
    value: { get_attr: [ vm_coreos_02, first_address ] }
  CoreOS-03 Private IP:
    description: Private IP address of the CoreOS-03 VM
    value: { get_attr: [ vm_coreos_03, first_address ] }
  CoreOS-04 Private IP:
    description: Private IP address of the CoreOS-04 VM
    value: { get_attr: [ vm_coreos_04, first_address ] }
  CoreOS-05 Private IP:
    description: Private IP address of the CoreOS-05 VM
    value: { get_attr: [ vm_coreos_05, first_address ] }
  CoreOS Cluster ETCD Endpoint:
    description: ETCD Endpoint of CoreOS Cluster
    value: { get_param: "CoreOS Cluster Discovery URL" }
  ch.icclab.crm.endpoint:
    description: Endpoint of the CRM service
    value: { get_attr: [ vm_coreos_01_floating_ip, floating_ip_address ] }
